============================= test session starts ==============================
platform darwin -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0 -- /Users/piyawatkunama/python/vrich/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/piyawatkunama/vrich-project/common-api
configfile: pyproject.toml
plugins: asyncio-0.24.0, anyio-4.9.0, xdist-3.8.0, cov-6.2.1, mock-3.14.1, Faker-33.3.1
asyncio: mode=Mode.AUTO, default_loop_scope=None
collecting ... collected 12 items

common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox ERROR [  8%]
common-api/tests/unit/test_facebook_inbox.py::test_create_multiple_facebook_inboxes ERROR [ 16%]
common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_with_same_messenger_id ERROR [ 25%]
common-api/tests/unit/test_facebook_inbox.py::test_get_facebook_inbox_by_id ERROR [ 33%]
common-api/tests/unit/test_facebook_inbox.py::test_pagination_builder_with_facebook_inbox ERROR [ 41%]
common-api/tests/unit/test_facebook_inbox.py::test_pagination_builder_with_facebook_inbox_filtered ERROR [ 50%]
common-api/tests/unit/test_facebook_inbox.py::test_update_facebook_inbox ERROR [ 58%]
common-api/tests/unit/test_facebook_inbox.py::test_unique_facebook_inbox ERROR [ 66%]
common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_repo ERROR [ 75%]
common-api/tests/unit/test_facebook_inbox.py::test_get_by_messenger_id ERROR [ 83%]
common-api/tests/unit/test_facebook_inbox.py::test_update_facebook_inbox_repo ERROR [ 91%]
common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_direct ERROR [100%]
ERROR: Coverage failure: total of 60 is less than fail-under=80


==================================== ERRORS ====================================
_________________ ERROR at setup of test_create_facebook_inbox _________________

self = <sqlalchemy.orm.clsregistry._class_resolver object at 0x107e19660>

    def _resolve_name(self) -> Union[Table, Type[Any], _ModNS]:
        name = self.arg
        d = self._dict
        rval = None
        try:
            for token in name.split("."):
                if rval is None:
>                   rval = d[token]
                           ^^^^^^^^

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/clsregistry.py:516: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/util/_collections.py:345: in __missing__
    self[key] = val = self.creator(key)
                      ^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.clsregistry._class_resolver object at 0x107e19660>
key = 'ProfileContact'

    def _access_cls(self, key: str) -> Any:
        cls = self.cls
    
        manager = attributes.manager_of_class(cls)
        decl_base = manager.registry
        assert decl_base is not None
        decl_class_registry = decl_base._class_registry
        metadata = decl_base.metadata
    
        if self.favor_tables:
            if key in metadata.tables:
                return metadata.tables[key]
            elif key in metadata._schemas:
                return _GetTable(key, getattr(cls, "metadata", metadata))
    
        if key in decl_class_registry:
            return _determine_container(key, decl_class_registry[key])
    
        if not self.favor_tables:
            if key in metadata.tables:
                return metadata.tables[key]
            elif key in metadata._schemas:
                return _GetTable(key, getattr(cls, "metadata", metadata))
    
        if "_sa_module_registry" in decl_class_registry and key in cast(
            _ModuleMarker, decl_class_registry["_sa_module_registry"]
        ):
            registry = cast(
                _ModuleMarker, decl_class_registry["_sa_module_registry"]
            )
            return registry.resolve_attr(key)
        elif self._resolvers:
            for resolv in self._resolvers:
                value = resolv(key)
                if value is not None:
                    return value
    
>       return self.fallback[key]
               ^^^^^^^^^^^^^^^^^^
E       KeyError: 'ProfileContact'

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/clsregistry.py:484: KeyError

The above exception was the direct cause of the following exception:

db = <sqlalchemy.orm.session.Session object at 0x1079c7d70>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4255: in _do_configure_registries
    mapper._post_configure_properties()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2418: in _post_configure_properties
    prop.init()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/interfaces.py:589: in init
    self.do_init()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/relationships.py:1656: in do_init
    self._setup_entity()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/relationships.py:1866: in _setup_entity
    self._clsregistry_resolve_name(argument)(),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/clsregistry.py:520: in _resolve_name
    self._raise_for_name(name, err)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.clsregistry._class_resolver object at 0x107e19660>
name = 'ProfileContact', err = KeyError('ProfileContact')

    def _raise_for_name(self, name: str, err: Exception) -> NoReturn:
        generic_match = re.match(r"(.+)\[(.+)\]", name)
    
        if generic_match:
            clsarg = generic_match.group(2).strip("'")
            raise exc.InvalidRequestError(
                f"When initializing mapper {self.prop.parent}, "
                f'expression "relationship({self.arg!r})" seems to be '
                "using a generic class as the argument to relationship(); "
                "please state the generic argument "
                "using an annotation, e.g. "
                f'"{self.prop.key}: Mapped[{generic_match.group(1)}'
                f"['{clsarg}']] = relationship()\""
            ) from err
        else:
>           raise exc.InvalidRequestError(
                "When initializing mapper %s, expression %r failed to "
                "locate a name (%r). If this is a class name, consider "
                "adding this relationship() to the %r class after "
                "both dependent classes have been defined."
                % (self.prop.parent, self.arg, name, self.cls)
            ) from err
E           sqlalchemy.exc.InvalidRequestError: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/clsregistry.py:501: InvalidRequestError
___________ ERROR at setup of test_create_multiple_facebook_inboxes ____________

db = <sqlalchemy.orm.session.Session object at 0x107c73500>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
_____ ERROR at setup of test_create_facebook_inbox_with_same_messenger_id ______

db = <sqlalchemy.orm.session.Session object at 0x107baf860>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
_______________ ERROR at setup of test_get_facebook_inbox_by_id ________________

db = <sqlalchemy.orm.session.Session object at 0x107e77050>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
________ ERROR at setup of test_pagination_builder_with_facebook_inbox _________

db = <sqlalchemy.orm.session.Session object at 0x107f57770>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
____ ERROR at setup of test_pagination_builder_with_facebook_inbox_filtered ____

db = <sqlalchemy.orm.session.Session object at 0x107e77da0>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
_________________ ERROR at setup of test_update_facebook_inbox _________________

db = <sqlalchemy.orm.session.Session object at 0x107f57200>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
_________________ ERROR at setup of test_unique_facebook_inbox _________________

db = <sqlalchemy.orm.session.Session object at 0x107f56c30>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
______________ ERROR at setup of test_create_facebook_inbox_repo _______________

db = <sqlalchemy.orm.session.Session object at 0x107e76d20>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
__________________ ERROR at setup of test_get_by_messenger_id __________________

db = <sqlalchemy.orm.session.Session object at 0x107e77860>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
______________ ERROR at setup of test_update_facebook_inbox_repo _______________

db = <sqlalchemy.orm.session.Session object at 0x107e945f0>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
_____________ ERROR at setup of test_create_facebook_inbox_direct ______________

db = <sqlalchemy.orm.session.Session object at 0x107adfc80>

    @pytest.fixture
    def profile(db):
        profile_in = FacebookProfileCreate(
            facebook_id="fbid-123",
            type="user",
            name="Test User",
            profile_picture_url="http://example.com/pic.jpg",
        )
>       profile = facebook_profile_repo.create(db, obj_in=profile_in)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

common-api/tests/unit/test_facebook_inbox.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common-api/app/db/repositories/facebook_profile/repo.py:20: in create
    return create_facebook_profile(db, obj_in=obj_in)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
common-api/app/db/repositories/facebook_profile/create.py:10: in create_facebook_profile
    db_obj = FacebookProfile(
<string>:4: in __init__
    ???
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4406: in _event_on_init
    instrumenting_mapper._check_configure()
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:2401: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4214: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[FacebookProfile(facebook_profiles)]'. Original exception was: When initializing mapper Mapper[FacebookProfile(facebook_profiles)], expression 'ProfileContact' failed to locate a name ('ProfileContact'). If this is a class name, consider adding this relationship() to the <class 'app.db.models.facebook_profile.FacebookProfile'> class after both dependent classes have been defined.

../python/vrich/venv/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py:4251: InvalidRequestError
================================ tests coverage ================================
_______________ coverage: platform darwin, python 3.12.3-final-0 _______________

Name                                                                 Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------------------------------
common-api/app/api/dependencies/database.py                             27     12    56%   21-34, 41-42, 47
common-api/app/api/dependencies/pagination.py                          102     63    38%   45-48, 51-54, 57-63, 66-76, 79-88, 93-99, 104-122, 147, 164-200
common-api/app/api/v1/endpoints/__init__.py                              0      0   100%
common-api/app/api/v1/endpoints/auth.py                                 41     19    54%   40-60, 74-81, 91
common-api/app/api/v1/endpoints/campaign.py                             36     17    53%   25-26, 40-43, 50, 57-60, 65-70
common-api/app/api/v1/endpoints/facebook_comment.py                     48     27    44%   37-41, 56-67, 74-97, 104-111, 118-127
common-api/app/api/v1/endpoints/facebook_inbox.py                       43     22    49%   37-39, 55-63, 71-89, 99-106, 115-122
common-api/app/api/v1/endpoints/facebook_post.py                        79     55    30%   37-39, 53-56, 63-86, 93-164, 171-176
common-api/app/api/v1/endpoints/facebook_profile.py                     44     24    45%   33-34, 48-55, 62-72, 82-103, 110-119
common-api/app/api/v1/endpoints/notifications.py                        23     14    39%   16-29, 41-52
common-api/app/api/v1/endpoints/users.py                                40     16    60%   26, 39-46, 56, 69, 80, 93-99, 111-117
common-api/app/api/v1/endpoints/webhooks.py                             64     43    33%   31-53, 63-102, 112-140
common-api/app/api/v1/router.py                                         12      0   100%
common-api/app/constants/auth.py                                         3      0   100%
common-api/app/constants/facebook_comment.py                             4      0   100%
common-api/app/constants/facebook_messenger.py                           3      0   100%
common-api/app/constants/facebook_post.py                                3      0   100%
common-api/app/constants/facebook_profile.py                             2      0   100%
common-api/app/constants/user.py                                         2      0   100%
common-api/app/core/config.py                                           46      2    96%   67, 71
common-api/app/core/security.py                                         27     16    41%   13-19, 23, 27, 31-34, 43-46
common-api/app/db/models/__init__.py                                    13      0   100%
common-api/app/db/models/base.py                                        24      9    62%   22-31
common-api/app/db/models/campaign.py                                    18      0   100%
common-api/app/db/models/campaigns_notifications.py                     16      0   100%
common-api/app/db/models/campaigns_products.py                          19      0   100%
common-api/app/db/models/facebook_comment.py                            19      0   100%
common-api/app/db/models/facebook_inbox.py                              18      0   100%
common-api/app/db/models/facebook_post.py                               21      0   100%
common-api/app/db/models/facebook_profile.py                            20      0   100%
common-api/app/db/models/orders.py                                      23      0   100%
common-api/app/db/models/orders_products.py                             17      0   100%
common-api/app/db/models/payments.py                                    24      0   100%
common-api/app/db/models/products.py                                    26      0   100%
common-api/app/db/models/user.py                                        11      0   100%
common-api/app/db/repositories/__init__.py                              11      0   100%
common-api/app/db/repositories/campaign.py                               4      0   100%
common-api/app/db/repositories/campaigns_notifications/__init__.py       0      0   100%
common-api/app/db/repositories/campaigns_products/__init__.py            0      0   100%
common-api/app/db/repositories/crud/__init__.py                          0      0   100%
common-api/app/db/repositories/crud/base.py                             44     26    41%   26-34, 39, 42-47, 56-67, 70-73
common-api/app/db/repositories/facebook_comment/__init__.py              1      0   100%
common-api/app/db/repositories/facebook_comment/create.py               22     16    27%   16-45
common-api/app/db/repositories/facebook_comment/query.py                 4      1    75%   7
common-api/app/db/repositories/facebook_comment/repo.py                 17      5    71%   14, 17, 20-21, 24
common-api/app/db/repositories/facebook_comment/update.py                6      4    33%   7-11
common-api/app/db/repositories/facebook_inbox/__init__.py                3      0   100%
common-api/app/db/repositories/facebook_inbox/create.py                 19     13    32%   16-47
common-api/app/db/repositories/facebook_inbox/repo.py                   13      3    77%   14, 17, 22
common-api/app/db/repositories/facebook_post/__init__.py                 1      0   100%
common-api/app/db/repositories/facebook_post/create.py                  21     14    33%   11-39
common-api/app/db/repositories/facebook_post/query.py                    4      1    75%   7
common-api/app/db/repositories/facebook_post/repo.py                    17      5    71%   12, 15, 18-19, 22
common-api/app/db/repositories/facebook_post/update.py                   6      4    33%   7-11
common-api/app/db/repositories/facebook_profile/__init__.py              1      0   100%
common-api/app/db/repositories/facebook_profile/create.py                9      4    56%   16-19
common-api/app/db/repositories/facebook_profile/query.py                 4      1    75%   7
common-api/app/db/repositories/facebook_profile/repo.py                 17      4    76%   14, 17, 23-24
common-api/app/db/repositories/facebook_profile/update.py                6      4    33%   7-11
common-api/app/db/repositories/orders/__init__.py                        0      0   100%
common-api/app/db/repositories/orders_products/__init__.py               0      0   100%
common-api/app/db/repositories/payments/__init__.py                      0      0   100%
common-api/app/db/repositories/products/__init__.py                      0      0   100%
common-api/app/db/repositories/profiles_contacts/__init__.py             0      0   100%
common-api/app/db/repositories/user/__init__.py                          2      0   100%
common-api/app/db/repositories/user/user_auth.py                        11      6    45%   10-15
common-api/app/db/repositories/user/user_create.py                      10      5    50%   9-17
common-api/app/db/repositories/user/user_query.py                        4      1    75%   7
common-api/app/db/repositories/user/user_repo.py                        18      5    72%   13, 16, 19, 22-23
common-api/app/db/repositories/user/user_update.py                      11      8    27%   6-14
common-api/app/db/session.py                                            11      4    64%   20-24
common-api/app/main.py                                                  45     21    53%   27-39, 67-69, 75-79, 83-85
common-api/app/schemas/__init__.py                                       6      0   100%
common-api/app/schemas/campaign.py                                      24      0   100%
common-api/app/schemas/common.py                                        20      0   100%
common-api/app/schemas/facebook_comment.py                              30      0   100%
common-api/app/schemas/facebook_messenger.py                            27      0   100%
common-api/app/schemas/facebook_post.py                                 35      0   100%
common-api/app/schemas/facebook_profile.py                              25      0   100%
common-api/app/schemas/user.py                                          26      0   100%
common-api/app/services/__init__.py                                      0      0   100%
common-api/app/services/facebook_scheduler.py                           36     26    28%   21-53, 57-80
common-api/app/services/socketio_server.py                              72     53    26%   21-53, 58-62, 68-69, 74-84, 91-106
common-api/app/services/webhook_cache_service.py                        24     14    42%   17-18, 25-41
common-api/app/utils/redis.py                                          108     85    21%   21-44, 48-50, 54-60, 64, 68, 81-120, 135-149, 164-183, 196-213, 225-244
--------------------------------------------------------------------------------------------------
TOTAL                                                                 1693    672    60%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
FAIL Required test coverage of 80% not reached. Total coverage: 60.31%
=========================== short test summary info ============================
ERROR common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox
ERROR common-api/tests/unit/test_facebook_inbox.py::test_create_multiple_facebook_inboxes
ERROR common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_with_same_messenger_id
ERROR common-api/tests/unit/test_facebook_inbox.py::test_get_facebook_inbox_by_id
ERROR common-api/tests/unit/test_facebook_inbox.py::test_pagination_builder_with_facebook_inbox
ERROR common-api/tests/unit/test_facebook_inbox.py::test_pagination_builder_with_facebook_inbox_filtered
ERROR common-api/tests/unit/test_facebook_inbox.py::test_update_facebook_inbox
ERROR common-api/tests/unit/test_facebook_inbox.py::test_unique_facebook_inbox
ERROR common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_repo
ERROR common-api/tests/unit/test_facebook_inbox.py::test_get_by_messenger_id
ERROR common-api/tests/unit/test_facebook_inbox.py::test_update_facebook_inbox_repo
ERROR common-api/tests/unit/test_facebook_inbox.py::test_create_facebook_inbox_direct
============================== 12 errors in 2.73s ==============================
