version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vrich_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vrich_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vrich_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Don't expose ports in production - only accessible within network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vrich_app_prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-vrich_db}

      # App Config
      DEBUG: "False"
      PROJECT_NAME: ${PROJECT_NAME:-VRich Project}
      VERSION: ${VERSION:-1.0.0}
      DESCRIPTION: ${DESCRIPTION:-A VRich project with PostgreSQL}

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-60}

      # CORS
      ALLOWED_HOSTS_RAW: ${ALLOWED_HOSTS_RAW}

      # API
      API_V1_STR: ${API_V1_STR:-/api/v1}

      # Server
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
      WORKERS: ${WORKERS:-4}

      # File Upload
      UPLOAD_DIR: ${UPLOAD_DIR:-/app/uploads}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_EXTENSIONS: ${ALLOWED_EXTENSIONS:-jpg,jpeg,png,gif,pdf,doc,docx}

    volumes:
      - uploads_data_prod:/app/uploads
      - logs_data_prod:/app/logs

    ports:
      - "8000:8000"

    networks:
      - vrich_network_prod

    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Migration Service (Production)
  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vrich_migration_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-vrich_db}
      SECRET_KEY: ${SECRET_KEY}

      # Admin user credentials
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_FULL_NAME: ${ADMIN_FULL_NAME:-System Administrator}

      # Add Python path
      PYTHONPATH: /app

    volumes:
      - ./migrations:/app/migrations:ro
      - ./scripts:/app/scripts:ro

    networks:
      - vrich_network_prod

    depends_on:
      db:
        condition: service_healthy

    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Creating admin user...' &&
        cd /app &&
        PYTHONPATH=/app python scripts/create_admin.py &&
        echo 'Database setup completed!'
      "

    restart: "no"

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (for production)
  redis:
    image: redis:7-alpine
    container_name: vrich_redis_prod
    volumes:
      - redis_data_prod:/data
    networks:
      - vrich_network_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Don't expose ports in production - only accessible within network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: vrich_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - vrich_network_prod
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: vrich_backup_prod
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - backups_data_prod:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - vrich_network_prod
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    profiles:
      - backup
    command: >
      sh -c "
        echo 'Starting backup service...' &&
        chmod +x /backup.sh &&
        /backup.sh
      "
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Networks
networks:
  vrich_network_prod:
    driver: bridge
    name: vrich_network_prod
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data_prod:
    driver: local
    name: vrich_postgres_data_prod

  uploads_data_prod:
    driver: local
    name: vrich_uploads_data_prod

  logs_data_prod:
    driver: local
    name: vrich_logs_data_prod

  redis_data_prod:
    driver: local
    name: vrich_redis_data_prod

  nginx_logs_prod:
    driver: local
    name: vrich_nginx_logs_prod

  prometheus_data_prod:
    driver: local
    name: vrich_prometheus_data_prod

  grafana_data_prod:
    driver: local
    name: vrich_grafana_data_prod

  backups_data_prod:
    driver: local
    name: vrich_backups_data_prod
